/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Addr, DAOCategory, InstantiateMsg, DAOMetadata, ExecuteMsg, Uint128, DAOProperty, Coin, QueryMsg, ArrayOfDAOProperty, Config, NullableDAOProperty, Nullableuint64, DAOStats } from "./CwDao.types";
export interface CwDaoReadOnlyInterface {
  contractAddress: string;
  getConfig: () => Promise<Config>;
  getMetadata: () => Promise<DAOMetadata>;
  getPropertyContractCodeId: () => Promise<NullableUint64>;
  getAllProperties: () => Promise<ArrayOfDAOProperty>;
  getProperty: ({
    id
  }: {
    id: Addr;
  }) => Promise<NullableDAOProperty>;
  getStats: () => Promise<DAOStats>;
}
export class CwDaoQueryClient implements CwDaoReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getConfig = this.getConfig.bind(this);
    this.getMetadata = this.getMetadata.bind(this);
    this.getPropertyContractCodeId = this.getPropertyContractCodeId.bind(this);
    this.getAllProperties = this.getAllProperties.bind(this);
    this.getProperty = this.getProperty.bind(this);
    this.getStats = this.getStats.bind(this);
  }
  getConfig = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_config: {}
    });
  };
  getMetadata = async (): Promise<DAOMetadata> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_metadata: {}
    });
  };
  getPropertyContractCodeId = async (): Promise<NullableUint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_property_contract_code_id: {}
    });
  };
  getAllProperties = async (): Promise<ArrayOfDAOProperty> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_all_properties: {}
    });
  };
  getProperty = async ({
    id
  }: {
    id: Addr;
  }): Promise<NullableDAOProperty> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_property: {
        id
      }
    });
  };
  getStats = async (): Promise<DAOStats> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_stats: {}
    });
  };
}
export interface CwDaoInterface extends CwDaoReadOnlyInterface {
  contractAddress: string;
  sender: string;
  setPropertyContractCodeId: ({
    codeId
  }: {
    codeId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  launchProperty: ({
    data
  }: {
    data: DAOProperty;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateAdmins: ({
    add,
    remove
  }: {
    add: Addr[];
    remove: Addr[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class CwDaoClient extends CwDaoQueryClient implements CwDaoInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setPropertyContractCodeId = this.setPropertyContractCodeId.bind(this);
    this.launchProperty = this.launchProperty.bind(this);
    this.updateAdmins = this.updateAdmins.bind(this);
  }
  setPropertyContractCodeId = async ({
    codeId
  }: {
    codeId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_property_contract_code_id: {
        code_id: codeId
      }
    }, fee, memo, _funds);
  };
  launchProperty = async ({
    data
  }: {
    data: DAOProperty;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      launch_property: {
        data
      }
    }, fee, memo, _funds);
  };
  updateAdmins = async ({
    add,
    remove
  }: {
    add: Addr[];
    remove: Addr[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_admins: {
        add,
        remove
      }
    }, fee, memo, _funds);
  };
}